{"version":3,"sources":["Task.jsx","App.js","serviceWorker.js","index.js"],"names":["Task","props","useState","in","complete","taskCompleted","setTaskCompleted","className","title","type","onClick","value","Tasks","console","log","map","e","i","key","App","state","currentTaskTitle","taskList","addTask","bind","this","refs","taskTitle","local","push","setState","placeholder","onBlur","ref","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAgBeA,EAdF,SAAAC,GAAU,IAAD,EACsBC,mBAASD,EAAME,GAAGC,UADxC,mBACbC,EADa,KACEC,EADF,KAEpB,OACE,wBAAIC,UAAWF,EAAgB,qBAAuB,QACpD,0BAAME,UAAU,SAASN,EAAME,GAAGK,OAClC,2BACEC,KAAK,SACLC,QAAS,kBAAMJ,GAAkBD,IACjCM,MAAON,EAAgB,iBAAc,sBCNvCO,EAAQ,SAAAX,GAKZ,OAJAY,QAAQC,IAAI,sBAAuBb,GAI5BA,EAAME,GAAGY,KAAI,SAACC,EAAGC,GAAJ,OAAU,kBAAC,EAAD,CAAMd,GAAIa,EAAGE,IAAKD,QAiEnCE,E,kDA7Db,WAAalB,GAAQ,IAAD,8BAClB,cAAMA,IAEDmB,MAAQ,CACXC,iBAAkB,GAClBC,SAAU,CACR,CACEd,MAAO,mBACPJ,UAAU,GAEZ,CACEI,MAAO,yBACPJ,UAAU,GAEZ,CACEI,MAAO,eACPJ,UAAU,KAMhB,EAAKmB,QAAU,EAAKA,QAAQC,KAAb,gBAtBG,E,sDA0BlB,GAAIC,KAAKL,MAAMC,kBAAoBI,KAAKL,MAAMC,mBAAqBI,KAAKC,KAAKC,UAAUhB,MAAO,CAC5F,IAAMiB,EAAQH,KAAKL,MAAME,SACzBM,EAAMC,KAAK,CACTrB,MAAOiB,KAAKL,MAAMC,iBAClBjB,UAAU,IAEZqB,KAAKK,SAAS,CAAER,SAAUM,IAC1BH,KAAKK,SAAS,CAAET,iBAAkB,KAClCI,KAAKC,KAAKC,UAAUhB,MAAQ,QAE5Bc,KAAKK,SAAS,CAAET,iBAAkBI,KAAKC,KAAKC,UAAUhB,U,+BAKxD,OACE,yBAAKJ,UAAU,OACb,gCACE,2BACEE,KAAK,OACLsB,YAAY,oBACZpB,MAAOc,KAAKJ,iBACZW,OAAQP,KAAKF,QACbU,IAAI,cAEN,2BAAOxB,KAAK,SAASE,MAAM,OAAOD,QAASe,KAAKF,WAElD,4BACE,kBAAC,EAAD,CAAOpB,GAAIsB,KAAKL,MAAME,iB,GAvDdY,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a93e4e77.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Task = props => {\r\n  const [taskCompleted, setTaskCompleted] = useState(props.in.complete);\r\n  return (\r\n    <li className={taskCompleted ? \"task taskCompleted\" : \"task\"}>\r\n      <span className=\"title\">{props.in.title}</span>\r\n      <input\r\n        type=\"button\"\r\n        onClick={() => setTaskCompleted(!taskCompleted)}\r\n        value={taskCompleted ? \"⛔ Re-open\" : \"⏰ Complete\"}\r\n      />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React from 'react'\r\nimport './App.css'\r\nimport Task from './Task'\r\n\r\nconst Tasks = props => {\r\n  console.log('TASKS props updated', props)\r\n  // TODO: note the inconsistency between states\r\n  // The parent/container was not informed of child's actions\r\n  // So 'completion' updates the child's UI but not the parent state.\r\n  return props.in.map((e, i) => <Task in={e} key={i}/>)\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      currentTaskTitle: '',\r\n      taskList: [\r\n        {\r\n          title: 'Buy more diapers',\r\n          complete: false,\r\n        },\r\n        {\r\n          title: 'Commit small and often',\r\n          complete: true,\r\n        },\r\n        {\r\n          title: 'Feed Barbara',\r\n          complete: false,\r\n        },\r\n      ],\r\n    }\r\n\r\n    // this.updateCurrentTask = this.updateCurrentTask.bind(this)\r\n    this.addTask = this.addTask.bind(this)\r\n  }\r\n\r\n  addTask () {\r\n    if (this.state.currentTaskTitle && this.state.currentTaskTitle === this.refs.taskTitle.value) {\r\n      const local = this.state.taskList\r\n      local.push({\r\n        title: this.state.currentTaskTitle,\r\n        complete: false,\r\n      })\r\n      this.setState({ taskList: local })\r\n      this.setState({ currentTaskTitle: '' })\r\n      this.refs.taskTitle.value = ''\r\n    } else {\r\n      this.setState({ currentTaskTitle: this.refs.taskTitle.value })\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"What is the task?\"\r\n            value={this.currentTaskTitle}\r\n            onBlur={this.addTask}\r\n            ref=\"taskTitle\"\r\n          />\r\n          <input type=\"button\" value=\"Save\" onClick={this.addTask}/>\r\n        </header>\r\n        <ul>\r\n          <Tasks in={this.state.taskList}/>\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}